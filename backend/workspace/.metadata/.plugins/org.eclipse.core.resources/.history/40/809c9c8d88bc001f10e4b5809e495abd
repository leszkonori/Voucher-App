package com.vouchersystem.voucher_system.service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.vouchersystem.voucher_system.model.Voucher;
import com.vouchersystem.voucher_system.repository.VoucherRepository;

import jakarta.transaction.Transactional;

@Service
public class VoucherService {

	@Autowired
    private VoucherRepository voucherRepository;
	
	public Voucher createVoucher(Voucher voucher) {
        if(getVoucherRepository().findByCode(voucher.getCode()) != null) {
        	return null;
        }
		voucher.setRedeemed(false);
		return getVoucherRepository().save(voucher);
    }
	
	public Optional<Voucher> getVoucherByCode(String code) {
        return getVoucherRepository().findByCode(code);
    }
	
	@Transactional
    public String redeemVoucher(String code) {
        Optional<Voucher> optionalVoucher = getVoucherRepository().findByCode(code);

        if (optionalVoucher.isPresent()) {
            Voucher voucher = optionalVoucher.get();
            
            // Ellenőrizzük, hogy érvényes-e
            if (voucher.getValidUntil().isBefore(LocalDate.now())) {
                return "Voucher is expired";
            }

            // Ellenőrizzük, hogy elérte-e a maximális beváltási számot
            if (voucher.isLimited() && voucher.getLimitNumber() == 0) {
                voucher.setRedeemed(true);
            	return "Voucher redemption limit reached";
            }

            // Növeljük a beváltás számát
            voucher.setLimitNumber(voucher.getLimitNumber() - 1);
            getVoucherRepository().save(voucher);

            return "Voucher redeemed successfully!";
        } else {
            return "Voucher not found";
        }
	}

	public VoucherRepository getVoucherRepository() {
		return voucherRepository;
	}

	public void setVoucherRepository(VoucherRepository voucherRepository) {
		this.voucherRepository = voucherRepository;
	}
}
